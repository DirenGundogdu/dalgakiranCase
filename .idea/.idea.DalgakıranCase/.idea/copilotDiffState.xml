<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Application/Interfaces/IEquipmentService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Application/Interfaces/IEquipmentService.cs" />
              <option name="updatedContent" value="using Domain.Entities;&#10;&#10;namespace Application.Interfaces;&#10;&#10;public interface IEquipmentService&#10;{&#10;    Task&lt;IEnumerable&lt;Equipment&gt;&gt; GetAllEquipmentsAsync();&#10;    Task&lt;Equipment&gt; GetEquipmentByIdAsync(Guid id);&#10;    Task&lt;Equipment&gt; CreateEquipmentAsync(Equipment equipment);&#10;    Task&lt;Equipment&gt; UpdateEquipmentAsync(Equipment equipment);&#10;    Task DeleteEquipmentAsync(Guid id);&#10;    Task&lt;IEnumerable&lt;Equipment&gt;&gt; GetEquipmentsByBrandAsync(string brand);&#10;    Task&lt;Equipment&gt; GetEquipmentBySerialNumberAsync(string serialNumber);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Application/Interfaces/IRoleService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Application/Interfaces/IRoleService.cs" />
              <option name="updatedContent" value="using Domain.Entities;&#10;&#10;namespace Application.Interfaces;&#10;&#10;public interface IRoleService&#10;{&#10;    Task&lt;IEnumerable&lt;Role&gt;&gt; GetAllRolesAsync();&#10;    Task&lt;Role&gt; GetRoleByIdAsync(Guid id);&#10;    Task&lt;Role&gt; GetRoleByNameAsync(string name);&#10;    Task&lt;Role&gt; CreateRoleAsync(Role role);&#10;    Task&lt;Role&gt; UpdateRoleAsync(Role role);&#10;    Task DeleteRoleAsync(Guid id);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Application/Interfaces/IUserEquipmentRequestService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Application/Interfaces/IUserEquipmentRequestService.cs" />
              <option name="updatedContent" value="using Domain.Entities;&#10;using Domain.Enums;&#10;&#10;namespace Application.Interfaces;&#10;&#10;public interface IUserEquipmentRequestService&#10;{&#10;    Task&lt;IEnumerable&lt;UserEquipmentRequest&gt;&gt; GetAllRequestsAsync();&#10;    Task&lt;UserEquipmentRequest&gt; GetRequestByIdAsync(Guid id);&#10;    Task&lt;IEnumerable&lt;UserEquipmentRequest&gt;&gt; GetRequestsByUserIdAsync(Guid userId);&#10;    Task&lt;IEnumerable&lt;UserEquipmentRequest&gt;&gt; GetRequestsByEquipmentIdAsync(Guid equipmentId);&#10;    Task&lt;IEnumerable&lt;UserEquipmentRequest&gt;&gt; GetRequestsByPriorityAsync(Priority priority);&#10;    Task&lt;UserEquipmentRequest&gt; CreateRequestAsync(UserEquipmentRequest request);&#10;    Task&lt;UserEquipmentRequest&gt; UpdateRequestAsync(UserEquipmentRequest request);&#10;    Task DeleteRequestAsync(Guid id);&#10;    Task&lt;IEnumerable&lt;UserEquipmentRequest&gt;&gt; GetPendingRequestsAsync();&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Application/Interfaces/IUserEquipmentService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Application/Interfaces/IUserEquipmentService.cs" />
              <option name="updatedContent" value="using Domain.Entities;&#10;&#10;namespace Application.Interfaces;&#10;&#10;public interface IUserEquipmentService&#10;{&#10;    Task&lt;IEnumerable&lt;UserEquipment&gt;&gt; GetAllUserEquipmentsAsync();&#10;    Task&lt;UserEquipment&gt; GetUserEquipmentByIdAsync(Guid id);&#10;    Task&lt;IEnumerable&lt;UserEquipment&gt;&gt; GetUserEquipmentsByUserIdAsync(Guid userId);&#10;    Task&lt;IEnumerable&lt;UserEquipment&gt;&gt; GetUserEquipmentsByEquipmentIdAsync(Guid equipmentId);&#10;    Task&lt;UserEquipment&gt; CreateUserEquipmentAsync(UserEquipment userEquipment);&#10;    Task&lt;UserEquipment&gt; UpdateUserEquipmentAsync(UserEquipment userEquipment);&#10;    Task DeleteUserEquipmentAsync(Guid id);&#10;    Task AssignEquipmentToUserAsync(Guid userId, Guid equipmentId);&#10;    Task UnassignEquipmentFromUserAsync(Guid userId, Guid equipmentId);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Application/Interfaces/IUserService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Application/Interfaces/IUserService.cs" />
              <option name="updatedContent" value="using Domain.Entities;&#10;&#10;namespace Application.Interfaces;&#10;&#10;public interface IUserService&#10;{&#10;    Task&lt;IEnumerable&lt;User&gt;&gt; GetAllUsersAsync();&#10;    Task&lt;User&gt; GetUserByIdAsync(Guid id);&#10;    Task&lt;User&gt; GetUserByEmailAsync(string email);&#10;    Task&lt;User&gt; CreateUserAsync(User user);&#10;    Task&lt;User&gt; UpdateUserAsync(User user);&#10;    Task DeleteUserAsync(Guid id);&#10;    Task&lt;bool&gt; ValidateUserCredentialsAsync(string email, string password);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Application/Services/EquipmentService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Application/Services/EquipmentService.cs" />
              <option name="updatedContent" value="using Application.Interfaces;&#10;using Domain.Entities;&#10;&#10;namespace Application.Services;&#10;&#10;public class EquipmentService : IEquipmentService&#10;{&#10;    private readonly IEquipmentRepository _equipmentRepository;&#10;&#10;    public EquipmentService(IEquipmentRepository equipmentRepository)&#10;    {&#10;        _equipmentRepository = equipmentRepository;&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;Equipment&gt;&gt; GetAllEquipmentsAsync()&#10;    {&#10;        return await _equipmentRepository.GetAll();&#10;    }&#10;&#10;    public async Task&lt;Equipment&gt; GetEquipmentByIdAsync(Guid id)&#10;    {&#10;        return await _equipmentRepository.GetById((int)id.GetHashCode());&#10;    }&#10;&#10;    public async Task&lt;Equipment&gt; CreateEquipmentAsync(Equipment equipment)&#10;    {&#10;        if (string.IsNullOrEmpty(equipment.Name))&#10;            throw new ArgumentException(&quot;Equipment name is required&quot;);&#10;&#10;        if (string.IsNullOrEmpty(equipment.SerialNumber))&#10;            throw new ArgumentException(&quot;Serial number is required&quot;);&#10;&#10;        var existingEquipment = await GetEquipmentBySerialNumberAsync(equipment.SerialNumber);&#10;        if (existingEquipment != null)&#10;            throw new InvalidOperationException(&quot;Equipment with this serial number already exists&quot;);&#10;&#10;        equipment.Id = Guid.NewGuid();&#10;        equipment.CreatedAt = DateTime.UtcNow;&#10;        equipment.UpdatedAt = DateTime.UtcNow;&#10;&#10;        await _equipmentRepository.Create(equipment);&#10;        return equipment;&#10;    }&#10;&#10;    public async Task&lt;Equipment&gt; UpdateEquipmentAsync(Equipment equipment)&#10;    {&#10;        equipment.UpdatedAt = DateTime.UtcNow;&#10;        await _equipmentRepository.Update(equipment);&#10;        return equipment;&#10;    }&#10;&#10;    public async Task DeleteEquipmentAsync(Guid id)&#10;    {&#10;        var equipment = await GetEquipmentByIdAsync(id);&#10;        if (equipment != null)&#10;        {&#10;            await _equipmentRepository.Delete(equipment);&#10;        }&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;Equipment&gt;&gt; GetEquipmentsByBrandAsync(string brand)&#10;    {&#10;        var equipments = await _equipmentRepository.GetAll();&#10;        return equipments.Where(e =&gt; e.Brand.ToLower().Contains(brand.ToLower()));&#10;    }&#10;&#10;    public async Task&lt;Equipment&gt; GetEquipmentBySerialNumberAsync(string serialNumber)&#10;    {&#10;        var equipments = await _equipmentRepository.GetAll();&#10;        return equipments.FirstOrDefault(e =&gt; e.SerialNumber == serialNumber);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Application/Services/RoleService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Application/Services/RoleService.cs" />
              <option name="updatedContent" value="using Application.Interfaces;&#10;using Domain.Entities;&#10;&#10;namespace Application.Services;&#10;&#10;public class RoleService : IRoleService&#10;{&#10;    private readonly IRoleRepository _roleRepository;&#10;&#10;    public RoleService(IRoleRepository roleRepository)&#10;    {&#10;        _roleRepository = roleRepository;&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;Role&gt;&gt; GetAllRolesAsync()&#10;    {&#10;        return await _roleRepository.GetAll();&#10;    }&#10;&#10;    public async Task&lt;Role&gt; GetRoleByIdAsync(Guid id)&#10;    {&#10;        return await _roleRepository.GetById((int)id.GetHashCode());&#10;    }&#10;&#10;    public async Task&lt;Role&gt; GetRoleByNameAsync(string name)&#10;    {&#10;        var roles = await _roleRepository.GetAll();&#10;        return roles.FirstOrDefault(r =&gt; r.Name.ToLower() == name.ToLower());&#10;    }&#10;&#10;    public async Task&lt;Role&gt; CreateRoleAsync(Role role)&#10;    {&#10;        if (string.IsNullOrEmpty(role.Name))&#10;            throw new ArgumentException(&quot;Role name is required&quot;);&#10;&#10;        var existingRole = await GetRoleByNameAsync(role.Name);&#10;        if (existingRole != null)&#10;            throw new InvalidOperationException(&quot;Role with this name already exists&quot;);&#10;&#10;        role.Id = Guid.NewGuid();&#10;        role.CreatedAt = DateTime.UtcNow;&#10;        role.UpdatedAt = DateTime.UtcNow;&#10;&#10;        await _roleRepository.Create(role);&#10;        return role;&#10;    }&#10;&#10;    public async Task&lt;Role&gt; UpdateRoleAsync(Role role)&#10;    {&#10;        role.UpdatedAt = DateTime.UtcNow;&#10;        await _roleRepository.Update(role);&#10;        return role;&#10;    }&#10;&#10;    public async Task DeleteRoleAsync(Guid id)&#10;    {&#10;        var role = await GetRoleByIdAsync(id);&#10;        if (role != null)&#10;        {&#10;            await _roleRepository.Delete(role);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Application/Services/UserEquipmentRequestService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Application/Services/UserEquipmentRequestService.cs" />
              <option name="updatedContent" value="using Application.Interfaces;&#10;using Domain.Entities;&#10;using Domain.Enums;&#10;&#10;namespace Application.Services;&#10;&#10;public class UserEquipmentRequestService : IUserEquipmentRequestService&#10;{&#10;    private readonly IUserEquipmentRequestRepository _requestRepository;&#10;    private readonly IUserRepository _userRepository;&#10;    private readonly IEquipmentRepository _equipmentRepository;&#10;&#10;    public UserEquipmentRequestService(&#10;        IUserEquipmentRequestRepository requestRepository, &#10;        IUserRepository userRepository, &#10;        IEquipmentRepository equipmentRepository)&#10;    {&#10;        _requestRepository = requestRepository;&#10;        _userRepository = userRepository;&#10;        _equipmentRepository = equipmentRepository;&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;UserEquipmentRequest&gt;&gt; GetAllRequestsAsync()&#10;    {&#10;        return await _requestRepository.GetAll();&#10;    }&#10;&#10;    public async Task&lt;UserEquipmentRequest&gt; GetRequestByIdAsync(Guid id)&#10;    {&#10;        return await _requestRepository.GetById((int)id.GetHashCode());&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;UserEquipmentRequest&gt;&gt; GetRequestsByUserIdAsync(Guid userId)&#10;    {&#10;        var requests = await _requestRepository.GetAll();&#10;        return requests.Where(r =&gt; r.UserId == userId);&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;UserEquipmentRequest&gt;&gt; GetRequestsByEquipmentIdAsync(Guid equipmentId)&#10;    {&#10;        var requests = await _requestRepository.GetAll();&#10;        return requests.Where(r =&gt; r.EquipmentId == equipmentId);&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;UserEquipmentRequest&gt;&gt; GetRequestsByPriorityAsync(Priority priority)&#10;    {&#10;        var requests = await _requestRepository.GetAll();&#10;        return requests.Where(r =&gt; r.Priority == priority);&#10;    }&#10;&#10;    public async Task&lt;UserEquipmentRequest&gt; CreateRequestAsync(UserEquipmentRequest request)&#10;    {&#10;        if (string.IsNullOrEmpty(request.Description))&#10;            throw new ArgumentException(&quot;Request description is required&quot;);&#10;&#10;        // Validate user exists&#10;        var user = await _userRepository.GetById((int)request.UserId.GetHashCode());&#10;        if (user == null)&#10;            throw new ArgumentException(&quot;User not found&quot;);&#10;&#10;        // Validate equipment exists&#10;        var equipment = await _equipmentRepository.GetById((int)request.EquipmentId.GetHashCode());&#10;        if (equipment == null)&#10;            throw new ArgumentException(&quot;Equipment not found&quot;);&#10;&#10;        request.Id = Guid.NewGuid();&#10;        request.CreatedAt = DateTime.UtcNow;&#10;        request.UpdatedAt = DateTime.UtcNow;&#10;&#10;        await _requestRepository.Create(request);&#10;        return request;&#10;    }&#10;&#10;    public async Task&lt;UserEquipmentRequest&gt; UpdateRequestAsync(UserEquipmentRequest request)&#10;    {&#10;        request.UpdatedAt = DateTime.UtcNow;&#10;        await _requestRepository.Update(request);&#10;        return request;&#10;    }&#10;&#10;    public async Task DeleteRequestAsync(Guid id)&#10;    {&#10;        var request = await GetRequestByIdAsync(id);&#10;        if (request != null)&#10;        {&#10;            await _requestRepository.Delete(request);&#10;        }&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;UserEquipmentRequest&gt;&gt; GetPendingRequestsAsync()&#10;    {&#10;        var requests = await _requestRepository.GetAll();&#10;        return requests.OrderByDescending(r =&gt; r.Priority)&#10;                      .ThenBy(r =&gt; r.CreatedAt);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Application/Services/UserEquipmentService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Application/Services/UserEquipmentService.cs" />
              <option name="updatedContent" value="using Application.Interfaces;&#10;using Domain.Entities;&#10;&#10;namespace Application.Services;&#10;&#10;public class UserEquipmentService : IUserEquipmentService&#10;{&#10;    private readonly IUserEquipmentRepository _userEquipmentRepository;&#10;    private readonly IUserRepository _userRepository;&#10;    private readonly IEquipmentRepository _equipmentRepository;&#10;&#10;    public UserEquipmentService(IUserEquipmentRepository userEquipmentRepository, IUserRepository userRepository, IEquipmentRepository equipmentRepository)&#10;    {&#10;        _userEquipmentRepository = userEquipmentRepository;&#10;        _userRepository = userRepository;&#10;        _equipmentRepository = equipmentRepository;&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;UserEquipment&gt;&gt; GetAllUserEquipmentsAsync()&#10;    {&#10;        return await _userEquipmentRepository.GetAll();&#10;    }&#10;&#10;    public async Task&lt;UserEquipment&gt; GetUserEquipmentByIdAsync(Guid id)&#10;    {&#10;        return await _userEquipmentRepository.GetById((int)id.GetHashCode());&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;UserEquipment&gt;&gt; GetUserEquipmentsByUserIdAsync(Guid userId)&#10;    {&#10;        var userEquipments = await _userEquipmentRepository.GetAll();&#10;        return userEquipments.Where(ue =&gt; ue.UserId == userId);&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;UserEquipment&gt;&gt; GetUserEquipmentsByEquipmentIdAsync(Guid equipmentId)&#10;    {&#10;        var userEquipments = await _userEquipmentRepository.GetAll();&#10;        return userEquipments.Where(ue =&gt; ue.EquipmentId == equipmentId);&#10;    }&#10;&#10;    public async Task&lt;UserEquipment&gt; CreateUserEquipmentAsync(UserEquipment userEquipment)&#10;    {&#10;        // Validate user exists&#10;        var user = await _userRepository.GetById((int)userEquipment.UserId.GetHashCode());&#10;        if (user == null)&#10;            throw new ArgumentException(&quot;User not found&quot;);&#10;&#10;        // Validate equipment exists&#10;        var equipment = await _equipmentRepository.GetById((int)userEquipment.EquipmentId.GetHashCode());&#10;        if (equipment == null)&#10;            throw new ArgumentException(&quot;Equipment not found&quot;);&#10;&#10;        userEquipment.Id = Guid.NewGuid();&#10;        userEquipment.CreatedAt = DateTime.UtcNow;&#10;        userEquipment.UpdatedAt = DateTime.UtcNow;&#10;&#10;        await _userEquipmentRepository.Create(userEquipment);&#10;        return userEquipment;&#10;    }&#10;&#10;    public async Task&lt;UserEquipment&gt; UpdateUserEquipmentAsync(UserEquipment userEquipment)&#10;    {&#10;        userEquipment.UpdatedAt = DateTime.UtcNow;&#10;        await _userEquipmentRepository.Update(userEquipment);&#10;        return userEquipment;&#10;    }&#10;&#10;    public async Task DeleteUserEquipmentAsync(Guid id)&#10;    {&#10;        var userEquipment = await GetUserEquipmentByIdAsync(id);&#10;        if (userEquipment != null)&#10;        {&#10;            await _userEquipmentRepository.Delete(userEquipment);&#10;        }&#10;    }&#10;&#10;    public async Task AssignEquipmentToUserAsync(Guid userId, Guid equipmentId)&#10;    {&#10;        var userEquipment = new UserEquipment&#10;        {&#10;            UserId = userId,&#10;            EquipmentId = equipmentId&#10;        };&#10;&#10;        await CreateUserEquipmentAsync(userEquipment);&#10;    }&#10;&#10;    public async Task UnassignEquipmentFromUserAsync(Guid userId, Guid equipmentId)&#10;    {&#10;        var userEquipments = await GetUserEquipmentsByUserIdAsync(userId);&#10;        var userEquipment = userEquipments.FirstOrDefault(ue =&gt; ue.EquipmentId == equipmentId);&#10;        &#10;        if (userEquipment != null)&#10;        {&#10;            await DeleteUserEquipmentAsync(userEquipment.Id);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Application/Services/UserService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Application/Services/UserService.cs" />
              <option name="updatedContent" value="using Application.Interfaces;&#10;using Domain.Entities;&#10;using Microsoft.EntityFrameworkCore;&#10;&#10;namespace Application.Services;&#10;&#10;public class UserService : IUserService&#10;{&#10;    private readonly IUserRepository _userRepository;&#10;&#10;    public UserService(IUserRepository userRepository)&#10;    {&#10;        _userRepository = userRepository;&#10;    }&#10;&#10;    public async Task&lt;IEnumerable&lt;User&gt;&gt; GetAllUsersAsync()&#10;    {&#10;        return await _userRepository.GetAll();&#10;    }&#10;&#10;    public async Task&lt;User&gt; GetUserByIdAsync(Guid id)&#10;    {&#10;        return await _userRepository.GetById((int)id.GetHashCode());&#10;    }&#10;&#10;    public async Task&lt;User&gt; GetUserByEmailAsync(string email)&#10;    {&#10;        var users = await _userRepository.GetAll();&#10;        return users.FirstOrDefault(u =&gt; u.Email == email);&#10;    }&#10;&#10;    public async Task&lt;User&gt; CreateUserAsync(User user)&#10;    {&#10;        if (string.IsNullOrEmpty(user.Email))&#10;            throw new ArgumentException(&quot;Email is required&quot;);&#10;&#10;        var existingUser = await GetUserByEmailAsync(user.Email);&#10;        if (existingUser != null)&#10;            throw new InvalidOperationException(&quot;User with this email already exists&quot;);&#10;&#10;        user.Id = Guid.NewGuid();&#10;        user.CreatedAt = DateTime.UtcNow;&#10;        user.UpdatedAt = DateTime.UtcNow;&#10;        &#10;        await _userRepository.Create(user);&#10;        return user;&#10;    }&#10;&#10;    public async Task&lt;User&gt; UpdateUserAsync(User user)&#10;    {&#10;        user.UpdatedAt = DateTime.UtcNow;&#10;        await _userRepository.Update(user);&#10;        return user;&#10;    }&#10;&#10;    public async Task DeleteUserAsync(Guid id)&#10;    {&#10;        var user = await GetUserByIdAsync(id);&#10;        if (user != null)&#10;        {&#10;            await _userRepository.Delete(user);&#10;        }&#10;    }&#10;&#10;    public async Task&lt;bool&gt; ValidateUserCredentialsAsync(string email, string password)&#10;    {&#10;        var user = await GetUserByEmailAsync(email);&#10;        return user != null &amp;&amp; user.Password == password; // In production, use hashed password comparison&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>